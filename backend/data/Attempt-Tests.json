[
    {
        "id": 1,
        "name": "add",
        "testCases": [
            {
                "test": "basic case",
                "input": "2, 3",
                "expectedOutput": "5",
                "successMessage": "Good job! Your code can handle basic cases",
                "errorMessage": "Try again! Your code failed to handle basic cases"
            },
            {
                "test": "0s",
                "input": "0, 0",
                "expectedOutput": "0",
                "successMessage": "Good job! Your code can handle zeros",
                "errorMessage": "Try again! Your code failed to handle zeros"
            },
            {
                "test": "negative numbers",
                "input": "-1, -1",
                "expectedOutput": "-2",
                "successMessage": "Good job! Your code can handle negative numbers",
                "errorMessage": "Try again! Your code failed to handle negative numbers"
            },
            {
                "test": "decimals",
                "input": "1.5, 2.5",
                "expectedOutput": "4.0",
                "successMessage": "Good job! Your code can handle decimals",
                "errorMessage": "Try again! Your code failed to handle decimals"
            },
            {
                "test": "large numbers",
                "input": "1000000, 1000000",
                "expectedOutput": "2000000",
                "successMessage": "Good job! Your code can handle large numbers",
                "errorMessage": "Try again! Your code failed to handle large numbers"
            },
            {
                "test": "positive and negative numbers",
                "input": "-2, 2",
                "expectedOutput": "0",
                "successMessage": "Good job! Your code can handle both positive and negative numbers",
                "errorMessage": "Try again! Your code failed to handle both positive and negative numbers"
            }
        ]
    },
    {
        "id": 2,
        "name": "twoSum",
        "testCases": [
            {
                "test": "basic case",
                "input": "[2, 7, 11, 15], 9",
                "expectedOutput": "[0,1]",
                "successMessage": "Good job! Your code can handle basic cases",
                "errorMessage": "Try again! Your code failed to handle basic cases"
            },
            {
                "test": "duplicate numbers",
                "input": "[3, 3], 6",
                "expectedOutput": "[0, 1]",
                "successMessage": "Good job! Your code can handle duplicate numbers",
                "errorMessage": "Try again! Your code failed to handle duplicate numbers"
            },
            {
                "test": "0s",
                "input": "[0, 4, 3, 0], 0",
                "expectedOutput": "[0, 3]",
                "successMessage": "Good job! Your code can handle zeros",
                "errorMessage": "Try again! Your code failed to handle zeros"
            },
            {
                "test": "no solution",
                "input": "[1, 2, 3], 8",
                "expectedOutput": "[]",
                "successMessage": "Good job! Your code can handle cases with no solution",
                "errorMessage": "Try again! Your code failed to handle cases with no solution"
            },
            {
                "test": "negative numbers",
                "input": "[-1, -2, -3, -4, -5], -8",
                "expectedOutput": "[2, 4]",
                "successMessage": "Good job! Your code can handle negative numbers",
                "errorMessage": "Try again! Your code failed to handle negative numbers"
            },
            {
                "test": "positive and negative numbers",
                "input": "[1, -2, 3, -4, 5], -3",
                "expectedOutput": "[0, 3]",
                "successMessage": "Good job! Your code can handle both positive and negative numbers",
                "errorMessage": "Try again! Your code failed to handle both positive and negative numbers"
            },
            {
                "test": "large numbers",
                "input": "[1000000, 999999], 1999999",
                "expectedOutput": "[0, 1]",
                "successMessage": "Good job! Your code can handle large numbers",
                "errorMessage": "Try again! Your code failed to handle large numbers"
            },
            {
                "test": "1 element in list",
                "input": "[1], 1",
                "expectedOutput": "[]",
                "successMessage": "Good job! Your code can handle lists with 1 element",
                "errorMessage": "Try again! Your code failed to handle lists with 1 element"
            },
            {
                "test": "empty list",
                "input": "[], 1",
                "expectedOutput": "[]",
                "successMessage": "Good job! Your code can handle empty lists",
                "errorMessage": "Try again! Your code failed to handle empty lists"
            },
            {
                "test": "more than 1 solution",
                "input": "[1, 1, 3, 3], 4",
                "expectedOutput": "[1, 2]",
                "successMessage": "Good job! Your code can handle cases with more than 1 solution",
                "errorMessage": "Try again! Your code failed to handle cases with more than 1 solution"
            }
        ]
    },
    { 
        "id": 3, 
        "name": "canFinish", 
        "testCases": [
            {
                "test": "no prerequisites", 
                "input": "2,[]",  
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle no prerequisites", 
                "errorMessage": "Try again! Your code failed to handle no prerequisites"
            }, 
            {
                "test": "single prerequisite", 
                "input": "2, [[1, 0]]",   
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle a single prerequisite", 
                "errorMessage": "Try again! Your code failed to handle a single prerequisite"
            },
            {
                "test": "many prerequisites", 
                "input": "4, [[0, 1], [2, 0], [3, 1], [3, 2]]", 
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle many prerequisites", 
                "errorMessage": "Try again! Your code failed to handle many prerequisites"
            }, 
            {
                "test": "simple cycle",
                "input": "2, [[1, 0], [0, 1]]", 
                "expectedOutput": "false", 
                "successMessage": "Good job! Your code can handle a simple cycle", 
                "errorMessage": "Try again! Your code failed to handle a simple cycle"  
            }, 
            {
                "test": "complex cycle", 
                "input": "4, [[1, 0], [2, 1], [3, 2], [1, 3]]",  
                "expectedOutput": "false", 
                "successMessage": "Good job! Your code can handle a complex cycle", 
                "errorMessage": "Try again! Your code failed to handle a complex cycle"
            }, 
            {
                "test": "disconnected graph", 
                "input": "5, [[1, 0], [3, 2]]", 
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle a disconnected graph", 
                "errorMessage": "Try again! Your code failed to handle a disconnected graph"
            }, 
            {
                "test": "self dependency", 
                "input": "3, [[1, 1]]", 
                "expectedOutput": "false", 
                "successMessage": "Good job! Your code can handle self-dependent courses", 
                "errorMessage": "Try again! Your code failed to handle self-dependent courses"
            }, 
            {
                "test": "interdependent courses", 
                "input": "3, [[0, 1], [1, 2], [2, 0]]", 
                "expectedOutput": "false", 
                "successMessage": "Good job! Your code can handle interdependent courses", 
                "errorMessage": "Try again! Your code failed to handle interdependent courses"
            }, 
            {
                "test": "multiple paths to a course", 
                "input": "4, [[1, 0], [2, 0], [3, 1], [3, 2], [3, 0]]", 
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle multiple paths to a course", 
                "errorMessage": "Try again! Your code failed to handle multiple paths to a course"
            }, 
            {
                "test": "no courses", 
                "input": "0, []", 
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle no courses", 
                "errorMessage": "Try again! Your code failed to handle no courses"
            }, 
            {
                "test": "large number of courses", 
                "input": "4000, []",  
                "expectedOutput": "true", 
                "successMessage": "Good job! Your code can handle a large number of courses", 
                "errorMessage": "Try again! Your code failed to handle a large number of courses"
            } 
        ]
    }
]