[
    {
        "id": 1,
        "name": "Sum Function",
        "code": "function add(a, b) { return a + b; }"
    },
    {
        "id": 2,
        "name": "Two Sum",
         "code": "function twoSum(nums, target) {\n    const numToIndex = {};\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numToIndex[complement] !== undefined) {\n            return [numToIndex[complement], i];\n        }\n        numToIndex[nums[i]] = i;\n    }\n    return [];\n}"
    },
    {
        "id": 3,
        "name": "Can Finish Courses?",
        "code": "function canFinish(numCourses, prerequisites) {\n    const graph = new Map();\n    const visited = new Set();\n\n    for (const [course, prereq] of prerequisites) {\n        if (!graph.has(course)) {\n            graph.set(course, []);\n        }\n        graph.get(course).push(prereq);\n    }\n\n    function dfs(course) {\n        if (visited.has(course)) {\n            return false;\n        }\n\n        if (!graph.has(course) || graph.get(course).length === 0) {\n            return true;\n        }\n        visited.add(course);\n        for (const pre of graph.get(course)) {\n            if (!dfs(pre)) {\n                return false;\n            }\n        }\n        visited.delete(course);\n        graph.set(course, []);\n        return true;\n    }\n    for (let course = 0; course < numCourses; course++) {\n        if (!dfs(course)) {\n            return false;\n        }\n    }\n    return true;\n}"

    }
]