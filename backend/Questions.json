[
    {
        "id": 1,
        "name": "Sum Function",
        "code": "function add(a, b) { return a + b; }"
    },
    {
        "id": 2,
        "name": "Two Sum",
        "code": "from typing import List\n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    numToIndex = {}\n    for index, num in enumerate(nums):\n        complement = target - num\n        if complement in numToIndex:\n            return [numToIndex[complement], index]\n        numToIndex[num] = index\n    return []\n\n# Example usage:\nnums = [2, 7, 11, 15]\ntarget = 9\nresult = twoSum(nums, target)\nprint(result)  # Output: [0, 1]\n"
    },
    {
        "id": 3,
        "name": "Can Finish Courses?",
        "code": "function canFinish(numCourses, prerequisites) {\n    const graph = new Map();\n    const visited = new Set();\n\n    for (const [course, prereq] of prerequisites) {\n        if (!graph.has(course)) {\n            graph.set(course, []);\n        }\n        graph.get(course).push(prereq);\n    }\n\n    function dfs(course) {\n        if (visited.has(course)) {\n            return false;\n        }\n\n        if (!graph.has(course) || graph.get(course).length === 0) {\n            return true;\n        }\n        visited.add(course);\n        for (const pre of graph.get(course)) {\n            if (!dfs(pre)) {\n                return false;\n            }\n        }\n        visited.delete(course);\n        graph.set(course, []);\n        return true;\n    }\n    for (let course = 0; course < numCourses; course++) {\n        if (!dfs(course)) {\n            return false;\n        }\n    }\n    return true;\n}"

    }
]