{
  "stats": {
    "suites": 10,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-31T04:42:02.935Z",
    "end": "2024-07-31T04:42:02.959Z",
    "duration": 24,
    "testsRegistered": 21,
    "passPercent": 42.857142857142854,
    "pendingPercent": 0,
    "other": 4,
    "hasOther": true,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "6cee0e95-9a99-4d0f-bc90-77029366d73b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b4ad3ac-220e-442b-872b-850ecf27c183",
          "title": "Helper Functions",
          "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
          "file": "/test/attemptController.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should read and parse Attempts.json\"",
              "fullTitle": "Helper Functions \"before each\" hook for \"should read and parse Attempts.json\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Initial mock database\nmockDb = {\n  attempts: JSON.stringify([\n    {\n      username: \"test\",\n      success: true,\n      message: \"All tests passed\",\n      attemptId: 1,\n      questionId: 2,\n      generateCode: \"function sum(a, b) { return a + b; }\",\n      numPassed: 1,\n    },\n    {\n      username: \"testUser\",\n      success: false,\n      message: \"Tests failed\",\n      attemptId: \"1\",\n      questionId: \"1\",\n      generateCode:\n        \"function twoSum(nums, target) { return `${nums[1]}, ${nums[0]}`; }\",\n      numPassed: 0,\n    },\n  ]),\n  questions: JSON.stringify([\n    {\n      id: 1,\n      name: \"Two Sum\",\n      code: \"from typing import List\\n\\ndef twoSum(nums: List[int], target: int) -> List[int]:\\n    numToIndex = {}\\n    for index, num in enumerate(nums):\\n        complement = target - num\\n        if complement in numToIndex:\\n            return [numToIndex[complement], index]\\n        numToIndex[num] = index\\n    return []\\n\\n# Example usage:\\nnums = [2, 7, 11, 15]\\ntarget = 9\\nresult = twoSum(nums, target)\\nprint(result)  # Output: [0, 1]\\n\",\n    },\n    {\n      id: 2,\n      name: \"Sum Function\",\n      code: \"function add(a, b) { return a + b; }\",\n    },\n  ]),\n  attemptTests: JSON.stringify([\n    {\n      id: 1,\n      testCases: [\n        {\n          input: \"1, 2\",\n          expectedOutput: \"3\",\n          successMessage: \"Success\",\n          errorMessage: \"Fail\",\n        },\n      ],\n    },\n  ]),\n};\n// Stub fs.readFileSync to return the mock database\nsinon.stub(fs, \"readFileSync\").callsFake((filePath, encoding) => {\n  if (encoding === \"utf8\") {\n    if (filePath.includes(\"Attempts.json\")) {\n      return mockDb.attempts;\n    }\n    if (filePath.includes(\"Questions.json\")) {\n      return mockDb.questions;\n    }\n    if (filePath.includes(\"Attempt-Tests.json\")) {\n      return mockDb.attemptTests;\n    }\n  }\n});\n// Stub fs.writeFileSync to update the mock database\nsinon.stub(fs, \"writeFileSync\").callsFake((filePath, data) => {\n  if (filePath.includes(\"Attempts.json\")) {\n    mockDb.attempts = data;\n  }\n});",
              "err": {
                "message": "ReferenceError: sinon is not defined",
                "estack": "ReferenceError: sinon is not defined\n    at Context.<anonymous> (file:///Users/timothyfang/Documents/Computer%20Science%20Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs:73:5)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "515ad791-8456-4412-ac83-c73e3155e6f2",
              "parentUUID": "3b4ad3ac-220e-442b-872b-850ecf27c183",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook for \"should read and parse Attempts.json\"",
              "fullTitle": "Helper Functions \"after each\" hook for \"should read and parse Attempts.json\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {
                "message": "ReferenceError: sinon is not defined",
                "estack": "ReferenceError: sinon is not defined\n    at Context.<anonymous> (file:///Users/timothyfang/Documents/Computer%20Science%20Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs:96:5)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "2547928f-f9a4-46c3-90ec-14253431751b",
              "parentUUID": "3b4ad3ac-220e-442b-872b-850ecf27c183",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e9894c5b-0466-4756-b99d-0f26f5e092fd",
              "title": "readAttemptsJSON",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read and parse Attempts.json",
                  "fullTitle": "Helper Functions readAttemptsJSON should read and parse Attempts.json",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = readAttemptsJSON();\nexpect(result).to.deep.equal(JSON.parse(mockDb.attempts));",
                  "err": {},
                  "uuid": "dee37cc9-463c-4173-a830-9e7719b825fd",
                  "parentUUID": "e9894c5b-0466-4756-b99d-0f26f5e092fd",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "dee37cc9-463c-4173-a830-9e7719b825fd"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f83e4096-ede3-4448-920d-3fe98fc61104",
              "title": "readQuestionsJSON",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read and parse Questions.json",
                  "fullTitle": "Helper Functions readQuestionsJSON should read and parse Questions.json",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = readQuestionsJSON();\nexpect(result).to.deep.equal(JSON.parse(mockDb.questions));",
                  "err": {},
                  "uuid": "5c4cb06c-ceb9-4433-8ddf-36420b60eaa3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5c4cb06c-ceb9-4433-8ddf-36420b60eaa3"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98ac8f09-0bea-4f2d-9a36-55e8050abe23",
              "title": "updateAttemptsJSON",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should write data to Attempts.json",
                  "fullTitle": "Helper Functions updateAttemptsJSON should write data to Attempts.json",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeData = [{ id: 1 }];\nupdateAttemptsJSON(fakeData);\nexpect(mockDb.attempts).to.equal(JSON.stringify(fakeData, null, 2));",
                  "err": {},
                  "uuid": "d8f679ce-2375-4251-817f-8ee375dd9411",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d8f679ce-2375-4251-817f-8ee375dd9411"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "348df628-2f96-4ae4-b128-829facc067d6",
              "title": "parseCode",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an empty string if no code is found",
                  "fullTitle": "Helper Functions parseCode should return an empty string if no code is found",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = \"No code here\";\nconst result = parseCode(response);\nexpect(result).to.equal(\"\");",
                  "err": {},
                  "uuid": "ffa0b321-12c7-4a35-b501-f70766269f29",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "ffa0b321-12c7-4a35-b501-f70766269f29"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a51ac0ea-f529-43dc-b67e-8379acfe3aab",
              "title": "generateCode",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate code based on the description and question",
                  "fullTitle": "Helper Functions generateCode should generate code based on the description and question",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fetchStub = sinon.stub(global, \"fetch\").resolves({\n  ok: true,\n  json: async () => ({ response: \"generatedCode\" }),\n});\nconst result = await generateCode(\"description\", \"question\");\nexpect(result).to.equal(\"generatedCode\");\nfetchStub.restore();",
                  "err": {},
                  "uuid": "caf15ab3-6f1f-4fe7-81b2-335af2f40641",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should throw an error if the response is not ok",
                  "fullTitle": "Helper Functions generateCode should throw an error if the response is not ok",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fetchStub = sinon.stub(global, \"fetch\").resolves({\n  ok: false,\n  status: 500,\n});\nlet error;\ntry {\n  await generateCode(\"description\", \"question\");\n} catch (err) {\n  error = err;\n}\nexpect(error).to.be.an(\"error\");\nfetchStub.restore();",
                  "err": {},
                  "uuid": "0ffaef3d-04bb-454a-ba5d-9a533f251604",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "caf15ab3-6f1f-4fe7-81b2-335af2f40641",
                "0ffaef3d-04bb-454a-ba5d-9a533f251604"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83a99812-2612-4de8-9cf2-7c11a3d5a53d",
              "title": "readAttemptTestsJSON",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read and parse Attempt-Tests.json",
                  "fullTitle": "Helper Functions readAttemptTestsJSON should read and parse Attempt-Tests.json",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = readAttemptTestsJSON();\nexpect(result).to.deep.equal(JSON.parse(mockDb.attemptTests));",
                  "err": {},
                  "uuid": "05de5c71-8e2c-4438-b75c-c25fc59b459d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "05de5c71-8e2c-4438-b75c-c25fc59b459d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0b86513-7cfe-4d2b-b21d-2a2c08261000",
              "title": "testAttempt",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should test user code against test cases",
                  "fullTitle": "Helper Functions testAttempt should test user code against test cases",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userCode = \"function add(a, b) { return a + b; }\";\nconst testCases = [\n  {\n    input: \"1, 2\",\n    expectedOutput: \"3\",\n    successMessage: \"Success\",\n    errorMessage: \"Fail\",\n  },\n];\nconst result = testAttempt(userCode, testCases);\nexpect(result).to.deep.equal([\n  {\n    input: \"1, 2\",\n    expectedOutput: \"3\",\n    actualOutput: 3,\n    message: \"Success\",\n    passed: true,\n  },\n]);",
                  "err": {},
                  "uuid": "896ddacb-fdb2-4a6f-84a8-5725ac61de97",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should handle errors in user code",
                  "fullTitle": "Helper Functions testAttempt should handle errors in user code",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userCode = 'function add(a, b) { throw new Error(\"error\"); }';\nconst testCases = [\n  {\n    input: \"1, 2\",\n    expectedOutput: \"3\",\n    successMessage: \"Success\",\n    errorMessage: \"Fail\",\n  },\n];\nconst result = testAttempt(userCode, testCases);\nexpect(result).to.deep.equal([\n  {\n    input: \"1, 2\",\n    expectedOutput: \"3\",\n    actualOutput: \"error\",\n    message: \"Fail\",\n    passed: false,\n  },\n]);",
                  "err": {},
                  "uuid": "05fece8e-d809-43a7-bca8-19b1c86c73f5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "896ddacb-fdb2-4a6f-84a8-5725ac61de97",
                "05fece8e-d809-43a7-bca8-19b1c86c73f5"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82c31181-3e71-47ad-8f5e-70d4da0d3b9d",
          "title": "Controller Functions",
          "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
          "file": "/test/attemptController.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should return attempts for the given username\"",
              "fullTitle": "Controller Functions \"before each\" hook for \"should return attempts for the given username\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Initial mock database\nmockDb = {\n  attempts: JSON.stringify([\n    {\n      username: \"test\",\n      success: true,\n      message: \"All tests passed\",\n      attemptId: 1,\n      questionId: 2,\n      generateCode: \"function sum(a, b) { return a + b; }\",\n      numPassed: 1,\n    },\n    {\n      username: \"testUser\",\n      success: false,\n      message: \"Tests failed\",\n      attemptId: \"1\",\n      questionId: \"1\",\n      generateCode:\n        \"function twoSum(nums, target) { return `${nums[1]}, ${nums[0]}`; }\",\n      numPassed: 0,\n    },\n  ]),\n  questions: JSON.stringify([\n    {\n      id: 1,\n      name: \"Two Sum\",\n      code: \"from typing import List\\n\\ndef twoSum(nums: List[int], target: int) -> List[int]:\\n    numToIndex = {}\\n    for index, num in enumerate(nums):\\n        complement = target - num\\n        if complement in numToIndex:\\n            return [numToIndex[complement], index]\\n        numToIndex[num] = index\\n    return []\\n\\n# Example usage:\\nnums = [2, 7, 11, 15]\\ntarget = 9\\nresult = twoSum(nums, target)\\nprint(result)  # Output: [0, 1]\\n\",\n    },\n    {\n      id: 2,\n      name: \"Sum Function\",\n      code: \"function add(a, b) { return a + b; }\",\n    },\n  ]),\n  attemptTests: JSON.stringify([\n    {\n      id: 1,\n      testCases: [\n        {\n          input: \"1, 2\",\n          expectedOutput: \"3\",\n          successMessage: \"Success\",\n          errorMessage: \"Fail\",\n        },\n      ],\n    },\n  ]),\n};\n// Stub fs.readFileSync to return the mock database\nsinon.stub(fs, \"readFileSync\").callsFake((filePath, encoding) => {\n  if (encoding === \"utf8\") {\n    if (filePath.includes(\"Attempts.json\")) {\n      return mockDb.attempts;\n    }\n    if (filePath.includes(\"Questions.json\")) {\n      return mockDb.questions;\n    }\n    if (filePath.includes(\"Attempt-Tests.json\")) {\n      return mockDb.attemptTests;\n    }\n  }\n});\n// Stub fs.writeFileSync to update the mock database\nsinon.stub(fs, \"writeFileSync\").callsFake((filePath, data) => {\n  if (filePath.includes(\"Attempts.json\")) {\n    mockDb.attempts = data;\n  }\n});\nreq = {\n  body: {},\n  params: {},\n};\nres = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub(),\n};",
              "err": {
                "message": "ReferenceError: sinon is not defined",
                "estack": "ReferenceError: sinon is not defined\n    at Context.<anonymous> (file:///Users/timothyfang/Documents/Computer%20Science%20Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs:276:5)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "0ea33852-5eb6-4196-bd9c-1b578dca537b",
              "parentUUID": "82c31181-3e71-47ad-8f5e-70d4da0d3b9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook for \"should return attempts for the given username\"",
              "fullTitle": "Controller Functions \"after each\" hook for \"should return attempts for the given username\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {
                "message": "ReferenceError: sinon is not defined",
                "estack": "ReferenceError: sinon is not defined\n    at Context.<anonymous> (file:///Users/timothyfang/Documents/Computer%20Science%20Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs:308:5)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": null
              },
              "uuid": "9ec882bf-dc7e-4ce9-b45d-595422b6ca95",
              "parentUUID": "82c31181-3e71-47ad-8f5e-70d4da0d3b9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fe58156f-3b25-4406-b84f-dac821c992b5",
              "title": "GetAttemptsByUsername",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return attempts for the given username",
                  "fullTitle": "Controller Functions GetAttemptsByUsername should return attempts for the given username",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.username = \"testUser\";\nGetAttemptsByUsername(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(\n  res.json.calledWith(\n    sinon.match({\n      message: \"Attempt retrieved successfully\",\n      userAttempts: sinon.match.array,\n    })\n  )\n).to.be.true;\nexpect(res.json.args[0][0].userAttempts).to.deep.include({\n  username: \"testUser\",\n  success: false,\n  message: \"Tests failed\",\n  attemptId: \"1\",\n  questionId: \"1\",\n  generateCode:\n    \"function twoSum(nums, target) { return `${nums[1]}, ${nums[0]}`; }\",\n  numPassed: 0,\n});",
                  "err": {},
                  "uuid": "53d82a18-95af-4754-9dc6-7a7c71a98da5",
                  "parentUUID": "fe58156f-3b25-4406-b84f-dac821c992b5",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return an error if no attempts found for the given username",
                  "fullTitle": "Controller Functions GetAttemptsByUsername should return an error if no attempts found for the given username",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.username = \"nonexistentuser\";\nGetAttemptsByUsername(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: \"Attempt not found\" })).to.be.true;",
                  "err": {},
                  "uuid": "d1807944-6f56-48f8-a7c0-f2a024925048",
                  "parentUUID": "fe58156f-3b25-4406-b84f-dac821c992b5",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "53d82a18-95af-4754-9dc6-7a7c71a98da5",
                "d1807944-6f56-48f8-a7c0-f2a024925048"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2bd89b2a-eb1d-46a3-b5bf-5b4c0dac8d5d",
              "title": "AddAttempt",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/attemptController.test.mjs",
              "file": "/test/attemptController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an error if description is missing",
                  "fullTitle": "Controller Functions AddAttempt should return an error if description is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body = {\n  username: \"newuser\",\n  questionId: 1,\n};\nreq.params.attemptId = 2;\nawait AddAttempt(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: \"Description is required\" })).to.be\n  .true;",
                  "err": {},
                  "uuid": "b96e3cfc-db60-4443-953b-e2589081c1e2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b96e3cfc-db60-4443-953b-e2589081c1e2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "667d1d68-6de3-4fa2-879d-b55f40017e72",
          "title": "Question Controller",
          "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/questionController.test.mjs",
          "file": "/test/questionController.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Question Controller\"",
              "fullTitle": "Question Controller \"before each\" hook in \"Question Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initial mock database\nmockDb = {\n    questions: JSON.stringify([\n        {\n            \"id\": 1,\n            \"code\": \"function add(a, b) { return a + b; }\"\n        },\n        {\n            \"id\": 2,\n            \"code\": \"function subtract(a, b) { return a - b; }\"\n        }\n    ])\n};\n// Stub fs.readFileSync to return mock database\nsinon.stub(fs, 'readFileSync').callsFake((filePath, encoding) => {\n    if (encoding === 'utf8') {\n        if (filePath.includes('Questions.json')) {\n            return mockDb.questions;\n        }\n    }\n    return undefined;\n});\nreq = {\n    params: {}\n};\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.stub()\n};",
              "err": {},
              "uuid": "a2e6dea3-cbe8-469e-821f-a8fbbf557c04",
              "parentUUID": "667d1d68-6de3-4fa2-879d-b55f40017e72",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Question Controller\"",
              "fullTitle": "Question Controller \"after each\" hook in \"Question Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6695dba6-7aae-416b-ac7e-15e6d6f04749",
              "parentUUID": "667d1d68-6de3-4fa2-879d-b55f40017e72",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a75b4a27-7d9c-4b0a-b4ae-657e814a534c",
              "title": "GetQuestions",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/questionController.test.mjs",
              "file": "/test/questionController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all available questions",
                  "fullTitle": "Question Controller GetQuestions should return all available questions",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "GetQuestions(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(sinon.match({\n    message: 'Questions retrieved successfully',\n    questions: sinon.match.array\n}))).to.be.true;\nexpect(res.json.args[0][0].questions).to.deep.equal(JSON.parse(mockDb.questions));",
                  "err": {},
                  "uuid": "434e548e-67ef-458f-8f20-6ebbf68b9c42",
                  "parentUUID": "a75b4a27-7d9c-4b0a-b4ae-657e814a534c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "434e548e-67ef-458f-8f20-6ebbf68b9c42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5d370ce5-77f8-4217-99d7-54d65486ce36",
              "title": "GetQuestionsById",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/questionController.test.mjs",
              "file": "/test/questionController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a specific question by ID",
                  "fullTitle": "Question Controller GetQuestionsById should return a specific question by ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = 1;\nGetQuestionsById(req, res);\nexpect(res.status.calledWith(200)).to.be.true;\nexpect(res.json.calledWith(sinon.match({\n    message: 'Question retrieved successfully',\n    question: sinon.match.object\n}))).to.be.true;\nconst expectedQuestion = {\n    \"id\": 1,\n    \"code\": \"function add(a, b) { return a + b; }\"\n};\nexpect(res.json.args[0][0].question).to.deep.equal(expectedQuestion);",
                  "err": {},
                  "uuid": "1825cb3a-07b6-4e95-bff4-8b3c8ed2dd01",
                  "parentUUID": "5d370ce5-77f8-4217-99d7-54d65486ce36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error if question ID is not found",
                  "fullTitle": "Question Controller GetQuestionsById should return an error if question ID is not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = 3;\nGetQuestionsById(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Question not found' })).to.be.true;",
                  "err": {},
                  "uuid": "cdbfeaff-5aaa-42de-8960-4b8b1251de9b",
                  "parentUUID": "5d370ce5-77f8-4217-99d7-54d65486ce36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error if question ID is not a valid number",
                  "fullTitle": "Question Controller GetQuestionsById should return an error if question ID is not a valid number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.id = 'invalid';\nGetQuestionsById(req, res);\nexpect(res.status.calledWith(400)).to.be.true;\nexpect(res.json.calledWith({ message: 'Question not found' })).to.be.true;",
                  "err": {},
                  "uuid": "18d40ebc-c4d7-4d31-aa8f-912e6820ef39",
                  "parentUUID": "5d370ce5-77f8-4217-99d7-54d65486ce36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1825cb3a-07b6-4e95-bff4-8b3c8ed2dd01",
                "cdbfeaff-5aaa-42de-8960-4b8b1251de9b",
                "18d40ebc-c4d7-4d31-aa8f-912e6820ef39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1e8d1a7-26a2-4721-9fb2-9867275246ba",
          "title": "userController tests",
          "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/userController.test.mjs",
          "file": "/test/userController.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"userController tests\"",
              "fullTitle": "userController tests \"before each\" hook in \"userController tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initialize mock database\nmockDb = [\n  { username: 'gloria', studentId: 123 },\n  { username: 'tim', studentId: 456 }\n];\n// Stub fs.readFileSync to return the mock database\nsinon.stub(fs, 'readFileSync').callsFake((filePath, encoding) => {\n  if (encoding === 'utf8') {\n    return JSON.stringify(mockDb);\n  }\n});\n// Stub fs.writeFileSync to update the mock database\nsinon.stub(fs, 'writeFileSync').callsFake((filePath, data) => {\n  mockDb = JSON.parse(data);\n});\nreq = {\n  body: {}\n};\nres = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub()\n};",
              "err": {},
              "uuid": "7b79f0b2-1c70-47d0-bab0-c05a990197f5",
              "parentUUID": "f1e8d1a7-26a2-4721-9fb2-9867275246ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"userController tests\"",
              "fullTitle": "userController tests \"after each\" hook in \"userController tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c1e788e3-fc48-4139-80bf-fc1d6f1b35bc",
              "parentUUID": "f1e8d1a7-26a2-4721-9fb2-9867275246ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a40024ef-c254-4365-95d0-09e8cead3ecf",
              "title": "AddStudent",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/userController.test.mjs",
              "file": "/test/userController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successfully adds a new student",
                  "fullTitle": "userController tests AddStudent successfully adds a new student",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Successful case \n     req.body = {\n       username: 'newname',\n       studentId: '789'\n     };\n     userController.AddStudent(req, res);\n     expect(res.status.calledWith(200)).to.be.true;\n     expect(res.json.calledWith(sinon.match({\n       message: 'User added successfully',\n       user: { username: 'newname', studentId: '789' }\n     }))).to.be.true;\n     expect(mockDb).to.deep.include({ username: 'newname', studentId: '789' });",
                  "err": {},
                  "uuid": "25209542-24d9-42c5-9423-8d76e16766ee",
                  "parentUUID": "a40024ef-c254-4365-95d0-09e8cead3ecf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns error if username or studentId is missing",
                  "fullTitle": "userController tests AddStudent returns error if username or studentId is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// missing username or student ID, should fail \n     req.body = { username: 'missingId' };\n     userController.AddStudent(req, res);\n     expect(res.status.calledWith(400)).to.be.true;\n     expect(res.json.calledWith({ message: 'Username or student ID is required' })).to.be.true;",
                  "err": {},
                  "uuid": "78e40809-b35a-4544-8fdd-e76598164573",
                  "parentUUID": "a40024ef-c254-4365-95d0-09e8cead3ecf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns error if username or studentId already exists",
                  "fullTitle": "userController tests AddStudent returns error if username or studentId already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// username or student ID already exists, should fail \n     req.body = {\n       username: 'gloria',\n       studentId: 123\n     };\n     userController.AddStudent(req, res);\n     expect(res.status.calledWith(400)).to.be.true;\n     expect(res.json.calledWith({ message: 'Username or student ID already exists' })).to.be.true;",
                  "err": {},
                  "uuid": "6ab0fcb4-03c3-4f7d-808b-dcc14a1844f5",
                  "parentUUID": "a40024ef-c254-4365-95d0-09e8cead3ecf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25209542-24d9-42c5-9423-8d76e16766ee",
                "78e40809-b35a-4544-8fdd-e76598164573",
                "6ab0fcb4-03c3-4f7d-808b-dcc14a1844f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcb0110a-bc0c-4246-93e3-926868974647",
              "title": "GetStudents",
              "fullFile": "/Users/timothyfang/Documents/Computer Science Repositories/Project-Groups-20-Lab-C/backend/test/userController.test.mjs",
              "file": "/test/userController.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns all registered students",
                  "fullTitle": "userController tests GetStudents returns all registered students",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Successful case \n     userController.GetStudents(req, res);\n     expect(res.status.calledWith(200)).to.be.true;\n     expect(res.json.calledWith(sinon.match({\n       message: 'Users retrieved successfully',\n       users: mockDb\n     }))).to.be.true;",
                  "err": {},
                  "uuid": "bab53ef0-31c1-4160-a0bb-33120e569d28",
                  "parentUUID": "dcb0110a-bc0c-4246-93e3-926868974647",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns an empty array if no users are present",
                  "fullTitle": "userController tests GetStudents returns an empty array if no users are present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// no students to retrieve, should return empty array \n     mockDb = []; \n     userController.GetStudents(req, res);\n     expect(res.status.calledWith(200)).to.be.true;\n     expect(res.json.calledWith(sinon.match({\n       message: 'Users retrieved successfully',\n       users: []\n     }))).to.be.true;",
                  "err": {},
                  "uuid": "d8b80466-d802-462b-8a5d-56a9a7f30539",
                  "parentUUID": "dcb0110a-bc0c-4246-93e3-926868974647",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bab53ef0-31c1-4160-a0bb-33120e569d28",
                "d8b80466-d802-462b-8a5d-56a9a7f30539"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "index"
      },
      "version": "6.2.0"
    }
  }
}