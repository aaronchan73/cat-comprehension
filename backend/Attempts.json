[
  {
    "username": "test",
    "success": true,
    "message": "All tests passed",
    "attemptId": 1,
    "questionId": "2",
    "generateCode": "function sum(a, b) { return a + b; }",
    "numPassed": 1
  },
  {
    "username": "test",
    "success": false,
    "message": "Tests failed",
    "attemptId": 2,
    "questionId": "1",
    "generateCode": "function multiply(a, b) { return a * b; }",
    "numPassed": 0
  },
  {
    "username": "test123123",
    "success": false,
    "message": "Tests failed",
    "attemptId": "0570796c-20bc-4adf-b731-1ec32d940ac5",
    "questionId": "2",
    "generateCode": "function findindices(nums, target) {\n  // Check if input arguments are valid\n  if (!Array.isArray(nums)) {\n    throw new TypeError('input argument nums is not an array');\n  }\n  if (target < 0) {\n    throw new TypeError('Target value must be a non-negative number');\n  }\n  \n  // initialize start and end indices to -1 as default values\n  let start = -1;\n  let end = target;\n\n  // Check for negative or zero input targets\n  if (start === -1 && end === target) {\n    throw new RangeError('Target value is negative, or equal to zero');\n  }\n\n  // Loop through all values in the array\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    \n    // Check if the target number already appears in this index\n    while (start !== -1 && end-- > start) {\n      if (num === nums[start]) {\n        return [start, end];\n      } else if (num < nums[start] && nums[start] <= nums[end]) {\n        // if the target number is less than or equal to the current one and not yet found in this index, set the start index to the next lower value\n        if (start === -1) {\n          start = end;\n        }\n      } else {\n        // Otherwise, skip to the next lower value and reset the start index to its previous value\n        end = start + 1;\n      }\n    }\n    \n    // if a target number has not been found yet, set both indices to their current values and proceed to the next index\n    if (start === -1) {\n      start = i;\n    } else {\n      end = i + 1;\n    }\n  }\n  \n  // if there are no targets in the array, return [-1,-1] as an empty array\n  if (start === -1 && end === target) {\n    return [-1,-1];\n  } else {\n    throw new RangeError('Target number(s) not found');\n  }\n}",
    "numPassed": 0,
    "testResults": [
      {
        "test": "basic case",
        "input": "[2, 7, 11, 15], 9",
        "expectedOutput": "[0,1]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle basic cases",
        "passed": false
      },
      {
        "test": "duplicate numbers",
        "input": "[3, 3], 6",
        "expectedOutput": "[0, 1]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle duplicate numbers",
        "passed": false
      },
      {
        "test": "0s",
        "input": "[0, 4, 3, 0], 0",
        "expectedOutput": "[0, 3]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle zeros",
        "passed": false
      },
      {
        "test": "no solution",
        "input": "[1, 2, 3], 8",
        "expectedOutput": "[]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle cases with no solution",
        "passed": false
      },
      {
        "test": "negative numbers",
        "input": "[-1, -2, -3, -4, -5], -8",
        "expectedOutput": "[2, 4]",
        "actualOutput": "Target value must be a non-negative number",
        "message": "Try again! Your code failed to handle negative numbers",
        "passed": false
      },
      {
        "test": "positive and negative numbers",
        "input": "[1, -2, 3, -4, 5], 1",
        "expectedOutput": "[0, 3]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle both positive and negative numbers",
        "passed": false
      },
      {
        "test": "large numbers",
        "input": "[1000000, 999999], 1",
        "expectedOutput": "[0, 1]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle large numbers",
        "passed": false
      },
      {
        "test": "1 element in list",
        "input": "[1], 1",
        "expectedOutput": "[]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle lists with 1 element",
        "passed": false
      },
      {
        "test": "empty list",
        "input": "[], 1",
        "expectedOutput": "[]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle empty lists",
        "passed": false
      },
      {
        "test": "more than 1 solution",
        "input": "[1, 1, 3, 3], 4",
        "expectedOutput": "[1, 2]",
        "actualOutput": "Target value is negative, or equal to zero",
        "message": "Try again! Your code failed to handle cases with more than 1 solution",
        "passed": false
      }
    ]
  }
]